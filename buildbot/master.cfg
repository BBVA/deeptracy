# -*- python -*-
import uuid
import yaml

from twisted.python import log
from buildbot.plugins import *

from environconfig import BooleanVar
from environconfig import CustomVar
from environconfig import EnvironConfig
from environconfig import IntVar
from environconfig import ListVar
from environconfig import MethodVar
from environconfig import PathVar
from environconfig import StringVar

# Bigger size limit to allow whole results to be transmitted from the workers.
# TODO: Split big messages into chunks instead of raising this limit
# from twisted.spread import banana
# banana.SIZE_LIMIT *= 10

c = BuildmasterConfig = {}

# ENVIRONMENT {{{1

@CustomVar.new
def ImagePatternVar(patternstr):
    patterns = patternstr.split(',')
    return (lambda name: any(fnmatch(name, p) for p in patterns))


@util.renderer
def generate_uuid(props):
    return str(uuid.uuid4())


class Config(EnvironConfig):
    DOCKER_HOST = StringVar(default="unix://var/run/docker.sock")
    WORKER_IMAGE_AUTOPULL = BooleanVar(default=True)
    WORKER_INSTANCES = IntVar(default=16)

    # Comma separated list of allowed image shell-like patterns. By default '*'
    WORKER_IMAGE_WHITELIST = ImagePatternVar(default=lambda name: True)

    @MethodVar
    def WASHER_FORCE_GATEWAY(env):
        if (env.DOCKER_HOST.startswith('unix://')
            or "localhost" in env.DOCKER_HOST):
            return "1"
        else:
            return "0"

    BUILDBOT_MQ_URL = StringVar(default=None)
    BUILDBOT_MQ_REALM = StringVar(default="buildbot")
    BUILDBOT_MQ_DEBUG = BooleanVar(default=False)

    BUILDBOT_WORKER_PORT = IntVar(default=9989)

    BUILDBOT_WEB_URL = StringVar(default="http://localhost:8010/")
    BUILDBOT_WEB_PORT = IntVar(default=8010)
    BUILDBOT_WEB_HOST = StringVar(default="localhost")

    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    BUILDBOT_DB_URL = StringVar(default="sqlite://")

    DEEPTRACY_SERVER_CONFIG = PathVar(default=None)
    DEEPTRACY_WORKER_IMAGE = StringVar(default="bbvalabsci/gitsec-worker")
    DEEPTRACY_BACKEND_URL = StringVar()


# WORKERS {{{1

docker_workers = ["docker-%d" % i for i in range(Config.WORKER_INSTANCES)]

c['workers'] = []
c['workers'] += [
    worker.WasherDockerLatentWorker(
        name,
        None,
        docker_host=Config.DOCKER_HOST,
        environment={"WASHER_FORCE_GATEWAY": Config.WASHER_FORCE_GATEWAY},
        image=util.Property("task_image", default=Config.DEEPTRACY_WORKER_IMAGE),
        autopull=Config.WORKER_IMAGE_AUTOPULL,
        followStartupLogs=True)
    for name in docker_workers]

if Config.BUILDBOT_MQ_URL is not None:
    c['mq'] = {
        'type': 'wamp',
        'router_url': Config.BUILDBOT_MQ_URL,
        'realm': Config.BUILDBOT_MQ_REALM,
        'debug': Config.BUILDBOT_MQ_DEBUG,
        'debug_websockets': Config.BUILDBOT_MQ_DEBUG,
        'debug_lowlevel': Config.BUILDBOT_MQ_DEBUG}


c['protocols'] = {'pb': {'port': 9989}}


# CHANGESOURCES {{{1

c['change_source'] = []


# SCHEDULERS {{{1

c['schedulers'] = [
    schedulers.AnyBranchScheduler(
        name="launch",
        treeStableTimer=1,
        builderNames=["launch"]),
    schedulers.Triggerable(
        name="bootstrap",
        builderNames=["bootstrap"]),
    schedulers.Triggerable(
        name="analyze",
        builderNames=["analyze"]),
]


# BUILDERS {{{1

def process_yml_cfg(step):
    def launch_from_yaml(yamlstr):
        config = yaml.load(yamlstr)

        for project_name, config in config["projects"].items():
            task_image = config.get("type")
            task_name = config.get("strategy", "main")


            # Is an allowed image?
            allowed_image = Config.WORKER_IMAGE_WHITELIST(task_image)
            if not allowed_image:
                log.err("Worker image %r is not allowed" % task_image)
                continue

            unimportant = config.get("unimportant", False)
            options = config.get("config", {})
            options["repopath"] = step.getProperty("repopath")

            #
            # Trigger tasks
            #
            for sched in step.schedulerNames:
                if "api" in task_image: continue
                yield {"sched_name": sched,
                       "props_to_set": {
                           "task_image": task_image,
                           "task_name": task_name,
                           "task_args": options,
                           "analysis_id": step.getProperty('analysis_id'),
                           "virtual_builder_name": f"{step.getProperty('project')}[{project_name}]"},
                       "unimportant": unimportant}

    # Server config
    if Config.DEEPTRACY_SERVER_CONFIG is not None:
        try:
            with open(Config.DEEPTRACY_SERVER_CONFIG, "r") as content:
                yield from launch_from_yaml(content)
        except Exception as exc:
            log.err("Error loading server config. %r" % exc)

    # User config
    if step.config is not None:
        yield from launch_from_yaml(step.config)


def count_tasks(*builders_properties):
    """
    Tasks must contain a `dependencies` property with a list of dictionaries
    containing:
        `spec`: The package specification made by the user. Ej: Django >= 1.4.0
        `package_name`: The name of the installed package.
        `version`: The version of the installed package.
    """
    task_count = 0
    for properties in builders_properties:
        if 'dependencies' in properties:
            task_count += 1
        if 'vulnerabilities' in properties:
            task_count += 1
    return {'task_count': task_count}


def has_property(name, inverse=False):
    def _has_property(step):
        return step.getProperties().has_key(name) ^ inverse
    return _has_property


class BackendSignal(steps.HTTPStep):
    requestsParams = ["params", "data", "json", "headers",
                      "cookies", "files", "auth",
                      "timeout", "allow_redirects", "proxies",
                      "hooks", "stream", "verify", "cert"]
    renderables = requestsParams + ["method", "url", "harvest"]
    def __init__(self, harvest=None, **kwargs):
        self.harvest = harvest
        super().__init__(**kwargs)

    def log_response(self, response):
        if self.harvest is not None:
            payload = response.json()
            for req_key, prop_key in self.harvest.items():
                self.setProperty(prop_key,
                                 payload.get(req_key, None),
                                 self.name,
                                 runtime=True)
        super().log_response(response)


launch_factory = util.BuildFactory()
launch_factory.addStep(
    steps.Trigger(schedulerNames=["bootstrap"],
                  set_properties={"virtual_builder_name": util.Property("project")}))

bootstrap_factory = util.BuildFactory()
bootstrap_factory.addStep(
	steps.SetProperty("repopath", "/work"))
bootstrap_factory.addStep(
    steps.Git(
        repourl=util.Property("repository"),
        workdir=util.Property("repopath"),
	shallow=True))
bootstrap_factory.addStep(
    BackendSignal(
        method='PUT',
        name='Dependency Extraction Started Signal',
        url=util.Interpolate(
            f"{Config.DEEPTRACY_BACKEND_URL}/analysis/%(prop:analysis_id)s/extraction/started")))
bootstrap_factory.addStep(
    steps.TriggerFromFile(
        name="Dependency Extraction Task(s)",
        waitForFinish=True,
        configfile=util.Interpolate("%(prop:repopath)s/.deeptracy.yml"),
        processor=process_yml_cfg,
        schedulerNames=["analyze"]))
bootstrap_factory.addStep(
    steps.ReduceTriggerProperties(
        name="Dependency Extraction Report Creation",
        reducefn=count_tasks))
bootstrap_factory.addStep(
    BackendSignal(
        method='PUT',
        name='Dependency Extraction Succeeded Signal',
        url=util.Interpolate(
            (f'{Config.DEEPTRACY_BACKEND_URL}/analysis/'
             f'%(prop:analysis_id)s/extraction/succeeded')),
        json={'task_count': util.Property('task_count')}))
bootstrap_factory.addStep(
    BackendSignal(
        method='PUT',
        name='Dependency Extraction Failed Signal',
        url=util.Interpolate(
            (f'{Config.DEEPTRACY_BACKEND_URL}/analysis/'
             f'%(prop:analysis_id)s/extraction/failed')),
        doStepIf=has_property('task_count', inverse=True),
        alwaysRun=True))

analyze_factory = util.BuildFactory()
analyze_factory.addStep(
	steps.SetProperty("repopath", "/work"))
analyze_factory.addStep(
	steps.SetProperty("execution_id", generate_uuid))
analyze_factory.addStep(
    steps.Git(
        repourl=util.Property("repository"),
        workdir=util.Property("repopath"),
	shallow=True))
analyze_factory.addStep(
    steps.WasherTask(
        task_name=util.Property("task_name"),
        task_args=util.Property("task_args")))
analyze_factory.addStep(
    BackendSignal(
        method='POST',
        name='Report Dependencies',
        url=util.Interpolate(
            (f'{Config.DEEPTRACY_BACKEND_URL}/analysis/'
             f'%(prop:analysis_id)s/%(prop:execution_id)s/dependencies')),
        json=util.Property("dependencies"),
        doStepIf=has_property('dependencies')))
analyze_factory.addStep(
    BackendSignal(
        method='POST',
        name='Report Vulnerabilities',
        url=util.Interpolate(
            (f'{Config.DEEPTRACY_BACKEND_URL}/analysis/'
             f'%(prop:analysis_id)s/%(prop:execution_id)s/vulnerabilities')),
        json=util.Property('vulnerabilities'),
        doStepIf=has_property('vulnerabilities')))


c['builders'] = []
c['builders'].append(
    util.BuilderConfig(
        name="launch",
        workernames=docker_workers,
        factory=launch_factory))

c['builders'].append(
    util.BuilderConfig(
        name="bootstrap",
        workernames=docker_workers,
        factory=bootstrap_factory))
c['builders'].append(
    util.BuilderConfig(
        name="analyze",
        workernames=docker_workers,
        factory=analyze_factory))



# PROJECT IDENTITY {{{1

c['title'] = "DeepTracy"
c['titleURL'] = "https://github.com/BBVA/deeptracy"
c['buildbotURL'] = Config.BUILDBOT_WEB_URL
c['www'] = dict(port=Config.BUILDBOT_WEB_PORT,
                plugins=dict(),
                change_hook_dialects={'base': True},
                custom_templates_dir="templates")



# DB URL {{{1

c['db'] = {'db_url' : Config.BUILDBOT_DB_URL}
