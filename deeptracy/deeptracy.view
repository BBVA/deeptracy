let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
if bufexists('~/Project/deeptracy2/deeptracy/providers.py') | buffer ~/Project/deeptracy2/deeptracy/providers.py | else | edit ~/Project/deeptracy2/deeptracy/providers.py | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <expr> <Right> TryKey('<Right>') ? '<Right>' : TooSoon('<RIGHT>','i')
inoremap <buffer> <silent> <expr> <Left> TryKey('<Left>') ? '<Left>' : TooSoon('<LEFT>','i')
inoremap <buffer> <silent> <expr> <Down> TryKey('<Down>') ? '<Down>' : TooSoon('<DOWN>','i')
inoremap <buffer> <silent> <expr> <Up> TryKey('<Up>') ? '<Up>' : TooSoon('<UP>','i')
xnoremap <buffer> <silent> <expr> + TryKey('+') ? '+' : TooSoon('+','x')
nnoremap <buffer> <silent> <expr> + TryKey('+') ? '+' : TooSoon('+','n')
xnoremap <buffer> <silent> <expr> - TryKey('-') ? '-' : TooSoon('-','x')
nnoremap <buffer> <silent> <expr> - TryKey('-') ? '-' : TooSoon('-','n')
vnoremap <buffer> <silent> J :call braceless#python#format#join_lines('v')
nnoremap <buffer> <silent> J :call braceless#python#format#join_lines('n')
vmap <buffer> [[ <Plug>(braceless-jump-prev-v)
vmap <buffer> [j <Plug>(braceless-segment-next-top-v)
vmap <buffer> [k <Plug>(braceless-segment-prev-top-v)
nmap <buffer> [[ <Plug>(braceless-jump-prev-n)
omap <buffer> [[ <Plug>(braceless-jump-prev-n)
nmap <buffer> [j <Plug>(braceless-segment-next-top-n)
omap <buffer> [j <Plug>(braceless-segment-next-top-n)
nmap <buffer> [k <Plug>(braceless-segment-prev-top-n)
omap <buffer> [k <Plug>(braceless-segment-prev-top-n)
vmap <buffer> ]] <Plug>(braceless-jump-next-v)
vmap <buffer> ]j <Plug>(braceless-segment-next-bot-v)
vmap <buffer> ]k <Plug>(braceless-segment-prev-bot-v)
nmap <buffer> ]] <Plug>(braceless-jump-next-n)
omap <buffer> ]] <Plug>(braceless-jump-next-n)
nmap <buffer> ]j <Plug>(braceless-segment-next-bot-n)
omap <buffer> ]j <Plug>(braceless-segment-next-bot-n)
nmap <buffer> ]k <Plug>(braceless-segment-prev-bot-n)
omap <buffer> ]k <Plug>(braceless-segment-prev-bot-n)
omap <buffer> aP <Plug>(braceless-a-n)
vmap <buffer> aP <Plug>(braceless-a-v)
xnoremap <buffer> <silent> <expr> h TryKey('h') ? 'h' : TooSoon('h','x')
nnoremap <buffer> <silent> <expr> h TryKey('h') ? 'h' : TooSoon('h','n')
omap <buffer> iP <Plug>(braceless-i-n)
vmap <buffer> iP <Plug>(braceless-i-v)
xnoremap <buffer> <silent> <expr> j TryKey('j') ? 'j' : TooSoon('j','x')
nnoremap <buffer> <silent> <expr> j TryKey('j') ? 'j' : TooSoon('j','n')
xnoremap <buffer> <silent> <expr> k TryKey('k') ? 'k' : TooSoon('k','x')
nnoremap <buffer> <silent> <expr> k TryKey('k') ? 'k' : TooSoon('k','n')
xnoremap <buffer> <silent> <expr> l TryKey('l') ? 'l' : TooSoon('l','x')
nnoremap <buffer> <silent> <expr> l TryKey('l') ? 'l' : TooSoon('l','n')
xmap <buffer> <Plug>(easymotion-prefix)S :call braceless#easymotion#segments(1, 2)
xmap <buffer> <Plug>(easymotion-prefix)] :call braceless#easymotion#blocks(1, 0)
xmap <buffer> <Plug>(easymotion-prefix)[ :call braceless#easymotion#blocks(1, 1)
xmap <buffer> <Plug>(easymotion-prefix)P :call braceless#easymotion#blocks(1, 2)
nmap <buffer> <Plug>(easymotion-prefix)S :call braceless#easymotion#segments(0, 2)
smap <buffer> <Plug>(easymotion-prefix)S :call braceless#easymotion#segments(0, 2)
omap <buffer> <Plug>(easymotion-prefix)S :call braceless#easymotion#segments(0, 2)
nmap <buffer> <Plug>(easymotion-prefix)] :call braceless#easymotion#blocks(0, 0)
smap <buffer> <Plug>(easymotion-prefix)] :call braceless#easymotion#blocks(0, 0)
omap <buffer> <Plug>(easymotion-prefix)] :call braceless#easymotion#blocks(0, 0)
nmap <buffer> <Plug>(easymotion-prefix)[ :call braceless#easymotion#blocks(0, 1)
smap <buffer> <Plug>(easymotion-prefix)[ :call braceless#easymotion#blocks(0, 1)
omap <buffer> <Plug>(easymotion-prefix)[ :call braceless#easymotion#blocks(0, 1)
nmap <buffer> <Plug>(easymotion-prefix)P :call braceless#easymotion#blocks(0, 2)
smap <buffer> <Plug>(easymotion-prefix)P :call braceless#easymotion#blocks(0, 2)
omap <buffer> <Plug>(easymotion-prefix)P :call braceless#easymotion#blocks(0, 2)
xnoremap <buffer> <silent> <expr> <Right> TryKey('<Right>') ? '<Right>' : TooSoon('<RIGHT>','x')
xnoremap <buffer> <silent> <expr> <Left> TryKey('<Left>') ? '<Left>' : TooSoon('<LEFT>','x')
xnoremap <buffer> <silent> <expr> <Down> TryKey('<Down>') ? '<Down>' : TooSoon('<DOWN>','x')
xnoremap <buffer> <silent> <expr> <Up> TryKey('<Up>') ? '<Up>' : TooSoon('<UP>','x')
nnoremap <buffer> <silent> <expr> <Right> TryKey('<Right>') ? '<Right>' : TooSoon('<RIGHT>','n')
nnoremap <buffer> <silent> <expr> <Left> TryKey('<Left>') ? '<Left>' : TooSoon('<LEFT>','n')
nnoremap <buffer> <silent> <expr> <Down> TryKey('<Down>') ? '<Down>' : TooSoon('<DOWN>','n')
nnoremap <buffer> <silent> <expr> <Up> TryKey('<Up>') ? '<Up>' : TooSoon('<UP>','n')
inoremap <buffer> <silent> <expr>  braceless#python#override_cr()
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal backupcopy=
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=+1
setlocal comments=b:#,fb:-
setlocal commentstring=#\ %s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'python'
setlocal filetype=python
endif
setlocal fixendofline
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal formatprg=
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=-1
setlocal include=^\\s*\\(from\\|import\\)
setlocal includeexpr=substitute(substitute(substitute(v:fname,b:grandparent_match,b:grandparent_sub,''),b:parent_match,b:parent_sub,''),b:child_match,b:child_sub,'g')
setlocal indentexpr=braceless#indent#expr(v:lnum)
setlocal indentkeys=!^F,o,O,<:>,0),0],0},=elif,=except
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=pydoc
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal list
setlocal makeencoding=
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=bin,octal,hex
setlocal number
setlocal numberwidth=4
setlocal omnifunc=python3complete#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal relativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal signcolumn=auto
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=.py
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'python'
setlocal syntax=python
endif
setlocal tabstop=8
setlocal tagcase=
setlocal tags=
setlocal termwinkey=
setlocal termwinscroll=10000
setlocal termwinsize=
setlocal textwidth=79
setlocal thesaurus=
setlocal undofile
setlocal undolevels=-123456
setlocal varsofttabstop=
setlocal vartabstop=
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 71 - ((35 * winheight(0) + 28) / 56)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
71
normal! 0
lcd ~/Project/deeptracy2/deeptracy
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
" vim: set ft=vim :
